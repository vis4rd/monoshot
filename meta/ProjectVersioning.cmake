# Versioning control

set(VERSION_CACHE_FILE "../meta/VERSION.md")
set(VERSION_HEADER_FILE "../meta/Version.hpp")
file(READ ${VERSION_CACHE_FILE} VERSION)

# Possible versions:
# <major>.<minor>.<patch>
# <major>.<minor>.<patch>-<type>
# <major>.<minor>.<patch>-<type>.<version>
#
# All of the above can be appended with .build.<build_number>
# Type types: alpha, beta, pre, rc

string(REGEX REPLACE "[.-]" ";" VERSION_LIST ${VERSION})
list(LENGTH VERSION_LIST VERSION_LIST_LENGTH)
list(FIND VERSION_LIST "build" BUILD_SPECIFIER_INDEX)

# Build version
math(EXPR BUILD_NUMBER_INDEX "${BUILD_SPECIFIER_INDEX}+1")
if(${BUILD_SPECIFIER_INDEX} EQUAL -1) # build version does not exist
    set(BUILD_NUMBER 0)
elseif(VERSION_LIST_LENGTH GREATER ${BUILD_NUMBER_INDEX}) # build number exists
    list(GET VERSION_LIST ${BUILD_NUMBER_INDEX} BUILD_NUMBER)
else() # no build number after build specifier
    set(BUILD_NUMBER 0)
endif()

# Strip build specifier and version
list(SUBLIST VERSION_LIST 0 ${BUILD_SPECIFIER_INDEX} VERSION_LIST)
list(LENGTH VERSION_LIST VERSION_LIST_LENGTH)

list(GET VERSION_LIST 0 1 2 VERSION_PARSED) # create parsed version list
list(GET VERSION_PARSED 0 VERSION_MAJOR)
list(GET VERSION_PARSED 1 VERSION_MINOR)
list(GET VERSION_PARSED 2 VERSION_PATCH)

if(${VERSION_LIST_LENGTH} GREATER 3) # release type exists
    list(GET VERSION_LIST 3 VERSION_RELEASE_TYPE)
    if(${VERSION_LIST_LENGTH} GREATER 4) # release type version exists
        list(GET VERSION_LIST 4 VERSION_RELEASE_TYPE_VERSION)
    else() # release tpye does not exist
        set(VERSION_RELEASE_TYPE_VERSION 1)
    endif()
endif()

# Write next build to the version file
math(EXPR NEXT_BUILD_NUMBER "${BUILD_NUMBER}+1")
if(DEFINED VERSION_RELEASE_TYPE)
    set(NEXT_VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}-${VERSION_RELEASE_TYPE}.${VERSION_RELEASE_TYPE_VERSION}.build.${NEXT_BUILD_NUMBER}")
else()
    set(NEXT_VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}-build.${NEXT_BUILD_NUMBER}")
endif()
file(WRITE ${VERSION_CACHE_FILE} ${NEXT_VERSION})
file(WRITE ${VERSION_HEADER_FILE}
"// This file is automatically generated by CMake.
// Please do not edit it manually.

#pragma once

#define VERSION_MAJOR ${VERSION_MAJOR}
#define VERSION_MINOR ${VERSION_MINOR}
#define VERSION_PATCH ${VERSION_PATCH}
#define BUILD_NUMBER ${NEXT_BUILD_NUMBER}
")

# Update build number to the current one
set(BUILD_NUMBER ${NEXT_BUILD_NUMBER})
set(VERSION ${NEXT_VERSION})
